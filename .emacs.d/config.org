* User details

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alberto Fanton")
  (setq user-mail-address "alberto.fanton@prima.it")
#+END_SRC

** Packages
#+BEGIN_SRC emacs-lisp
  (defvar myPackages '(elpy
                       smartparens
                       yafolding
                       nix-mode
                       flycheck
                       ace-jump-mode
                       ripgrep
                       exec-path-from-shell
                       multiple-cursors
                       smartparens
                       hasklig-mode
                       py-autopep8
                       blacken
                       ccls
                       org-fragtog
                       elixir-mode
                       lsp-docker
                       dockerfile-mode
                       company
                       docker-compose-mode
                       pyimport
                       py-isort
                       py-yapf
                       lsp-python-ms
                       magit
                       markdown-mode
                       org
                       org-journal
                       org-bullets
                       ob-async
                       ob-elixir
                       org-bullets
                       toml-mode
                       yaml-mode
                       haskell-mode
                       flycheck-haskell
                       flycheck-projectile
                       hindent
                       lsp-mode
                       projectile
                       lsp-haskell
                       lsp-treemacs
                       helm-lsp
                       hasklig-mode
                       lsp-ui
                       use-package
                       darktooth-theme
                       which-key
                       realgud
                       subatomic256-theme
                       git-gutter
                       treemacs
                       doom-modeline
                       org-roam
                       hydra
                       helm-xref
                       dap-mode
                       )
   "Default packages")
  (require 'cl)
  (defun myPackages-installed-p()
   (loop for pkg in myPackages
    when(not (package-installed-p pkg)) do(return nil)
    finally (return t)))

  (unless(myPackages-installed-p)
   (message "%s" "Refreshing package database...")
   (package-refresh-contents t)
   (dolist(pkg myPackages)
      (when(not (package-installed-p pkg))
      (package-install pkg))))
#+END_SRC

** Theme   
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
  (doom-themes-visual-bell-config))

  ;; (use-package solaire-mode
  ;; :ensure t
  ;; :config
  ;; (solaire-global-mode +1))

#+END_SRC


** Misc
#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
  (setenv "ESHELL" (expand-file-name "~/bin/eshell"))
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-display-line-numbers-mode)
  (require 'exec-path-from-shell) ;; if not using the ELPA package
  (exec-path-from-shell-initialize)
  (global-prettify-symbols-mode t)
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode 1)
      (show-paren-mode t)))
  (use-package expand-region
  :ensure t
  :bind ("M-m" . er/expand-region))
#+END_SRC

** Setup
#+BEGIN_SRC emacs-lisp
  (setq
   frame-resize-pixelwise t
   inhibit-splash-screen t
   initial-scratch-message nil
   initial-major-mode 'org-mode)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (add-to-list 'default-frame-alist '(font . "Hasklig-15"))
  (setq-default indent-tabs-mode nil)
  (setq split-width-threshold 1)
  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))

  (require 'use-package)
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)


  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  (require 'which-key)
  (which-key-mode)
  (which-key-setup-minibuffer)
  (yas-global-mode)

  (define-globalized-minor-mode my-global-hasklig-mode hasklig-mode
    (lambda () (hasklig-mode 1)))

  (my-global-hasklig-mode 1)

  (set-face-attribute 'mode-line nil  :height 100)

  (setq smerge-command-prefix "\C-cv")

  (use-package diff-hl
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
  (use-package minions
    :ensure t
    :config
    (setq minions-mode-line-lighter ""
          minions-mode-line-delimiters '("" . ""))
    (minions-mode 1))
  (global-hl-line-mode)

#+END_SRC


** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C-c z") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key(kbd "C-x g") 'magit-status)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm :ensure t)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (helm-mode 1)

#+END_SRC


** ORG
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-ellipsis "â¤µ")
  (require 'ob-async)
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-babel-python-command "python3")
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages 'org-babel-load-languages
      '(
          (shell . t)
          (haskell . t)
          (elixir . t)
          (python . t)                    
      )
  )
  (setq org-image-actual-width nil)

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-hide-leading-stars t)
  (setq org-src-tab-acts-natively t)  
#+END_SRC

*** Journal
#+BEGIN_SRC emacs-lisp
    (global-set-key(kbd "C-c e") 'org-journal-new-entry)

    (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "C-c j")
    :config
    (setq org-journal-dir "~/Documents/org/journal/"
          org-journal-date-format "%A, %d %B %Y"
          org-agenda-files '("~/Documents/org")))

    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Positipon point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min)))

  
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (setq projectile-project-search-path '("~/Projects/" "~/Work/" "~/Learning"))

#+END_SRC

** Modeline
Run ~nerd-icons-install-fonts~
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+END_SRC


** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
    ([f4] . treemacs)
    ([f5] . treemacs-select-window))
  :config
  (setq treemacs-is-never-other-window t))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :commands lsp
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
      :hook
      (sh-mode . lsp)
      (lsp-mode . lsp-enable-which-key-integration)
      )

    (use-package lsp-ui
      :init
      (setq lsp-ui-doc-position 'at-point)
      (setq lsp-ui-doc-show-with-cursor t)    
      )
    (add-hook 'haskell-mode-hook #'lsp-deferred)
    (add-hook 'elixir-mode-hook #'lsp-deferred)
    (add-hook 'rust-mode-hook #'lsp-deferred)

    (use-package lsp-ui :commands lsp-ui-mode)
    (use-package helm-lsp :commands helm-lsp-workspace-symbol)

    (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+END_SRC

* Languages
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode :ensure t)
  (require 'haskell-interactive-mode)
  (require 'haskell-process)

  (define-key haskell-mode-map (kbd "<f8>") 'haskell-navigate-imports)
  (define-key haskell-mode-map (kbd "<f9>") 'haskell-mode-format-imports)
  ;(define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def)
  ;(define-key haskell-mode-map (kbd "M-.") 'haskell-mode-goto-loc)
  (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)  
  (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-mode-show-type-at)

  (custom-set-variables
   ;;'(haskell-stylish-on-save t)
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-tags-on-save t)
   '(haskell-process-log t)
   '(haskell-process-suggest-hoogle-imports t))
   '(haskell-process-args-stack-ghci '("--ghci-options=-ferror-spans"))
   '(haskell-process-log t)
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-type 'stack-ghci)

  (add-hook 'haskell-mode-hook
            (lambda ()
            (set (make-local-variable 'company-backends)
                 (append '((company-capf company-dabbrev-code))
                         company-backends))))
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)

  (add-hook 'lsp-after-initialize-hook
          '(lambda ()
             (lsp--set-configuration
              '(
                (:haskell (:plugin (:tactics (:config (:timeout_duration 5)))))
                (:haskell (:formattingProviderplugin :stylish))
                )
              )))
#+END_SRC

** Elixir
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :ensure t
    :diminish lsp-mode
    :hook
    (elixir-mode . lsp)
    :init
    (add-to-list 'exec-path "~/Projects/elixir-ls/release/"))
#+END_SRC

** Git gutter
#+BEGIN_SRC emacs-lisp
  (require 'git-gutter)

  (global-git-gutter-mode t)

  (global-set-key (kbd "C-x C-g") 'git-gutter)
  (global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)

  ;; Jump to next/previous hunk
  (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
  (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)

  ;; Stage current hunk
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)

  ;; Revert current hunk
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)

  ;; Mark current hunk
  (global-set-key (kbd "C-x v SPC") #'git-gutter:mark-hunk)
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp 
(add-hook 'php-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-php)
  (yas-global-mode))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

  (use-package poetry
   :ensure t)
  ;; (add-hook 'python-mode-hook 'python-isort-on-save-mode)
  ;; (add-hook 'python-mode-hook 'py-yapf-enable-on-save)
#+END_SRC


** Ace jump
#+BEGIN_SRC emacs-lisp
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;;
;; enable a more powerful jump back function from ace jump mode
;;
(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x j") 'ace-jump-mode-pop-mark)
#+END_SRC

** Nix Mode
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+END_SRC

