** User details
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alberto Fanton")
  (setq user-mail-address "alberto.fanton@protonmail.com")
#+END_SRC
** Packages
#+BEGIN_SRC emacs-lisp
  (defvar myPackages '(elpy
                       meow
                       smartparens
                       ormolu
                       nixpkgs-fmt
                       pdf-tools
                       typescript-mode
                       yafolding
                       nix-mode
                       nix-ts-mode
                       flycheck
                       flycheck-rust
                       ace-jump-mode
                       ripgrep
                       exec-path-from-shell
                       sudo-edit
                       smartparens
                       hasklig-mode
                       py-autopep8
                       blacken
                       ccls
                       treesit-auto
                       org-fragtog
                       elixir-mode
                       lsp-docker
                       dockerfile-mode
                       company
                       docker-compose-mode
                       pyimport
                       py-isort
                       py-yapf
                       lsp-python-ms
                       magit
                       markdown-mode
                       org
                       org-journal
                       rust-mode
                       org-bullets
                       ob-async
                       ob-elixir
                       org-bullets
                       toml-mode
                       yaml-mode
                       haskell-mode
                       flycheck-haskell
                       hindent
                       lsp-mode
                       lsp-treemacs
                       hasklig-mode
                       lsp-ui
                       use-package
                       darktooth-theme
                       which-key
                       realgud
                       subatomic256-theme
                       git-gutter
                       treemacs
                       doom-modeline
                       org-roam
                       hydra
                       dap-mode
                       adoc-mode
                       vertico
                       vertico-posframe
                       fzf
                       )
   "Default packages")
  (require 'cl)
  (defun myPackages-installed-p()
   (loop for pkg in myPackages
    when(not (package-installed-p pkg)) do(return nil)
    finally (return t)))

  (unless(myPackages-installed-p)
   (message "%s" "Refreshing package database...")
   (package-refresh-contents t)
   (dolist(pkg myPackages)
      (when(not (package-installed-p pkg))
      (package-install pkg))))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-tomorrow-night t)
  (doom-themes-visual-bell-config))
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (setenv "ESHELL" (expand-file-name "~/bin/eshell"))
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-display-line-numbers-mode)
  (require 'exec-path-from-shell) ;; if not using the ELPA package
  (exec-path-from-shell-initialize)
  (global-prettify-symbols-mode t)
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
#+END_SRC

** Setup
#+BEGIN_SRC emacs-lisp
  (setq
   frame-resize-pixelwise t
   inhibit-splash-screen t
   initial-scratch-message nil
   initial-major-mode 'org-mode)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (add-to-list 'default-frame-alist '(font . "Hasklig 15"))
  (setq-default indent-tabs-mode nil)
  (setq split-width-threshold 1)
  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))
  (require 'use-package)
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)


  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  (require 'which-key)
  (which-key-mode)
  (which-key-setup-minibuffer)
  (yas-global-mode)

  (define-globalized-minor-mode my-global-hasklig-mode hasklig-mode
    (lambda () (hasklig-mode 1)))

  (my-global-hasklig-mode 1)

  (set-face-attribute 'mode-line nil  :height 100)

  (setq smerge-command-prefix "\C-cv")

  (use-package diff-hl
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
  (use-package minions
    :ensure t
    :config
    (setq minions-mode-line-lighter ""
          minions-mode-line-delimiters '("" . ""))
    (minions-mode 1))
  (global-hl-line-mode)
#+END_SRC

#+RESULTS:
: t

#+END_SRC#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C-c z") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key(kbd "C-x g") 'magit-status)
#+END_SRC

** ORG
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-ellipsis "â¤µ")
  (require 'ob-async)
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-babel-python-command "python3")
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages 'org-babel-load-languages
      '(
          (shell . t)
          (haskell . t)
          (elixir . t)
          (python . t)                    
      )
  )
  (setq org-image-actual-width nil)

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-hide-leading-stars t)
  (setq org-src-tab-acts-natively t)  
#+END_SRC

*** Journal
#+BEGIN_SRC emacs-lisp
    (global-set-key(kbd "C-c e") 'org-journal-new-entry)

    (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "C-c j")
    :config
    (setq org-journal-dir "~/Documents/org/journal/"
          org-journal-date-format "%A, %d %B %Y"
          org-agenda-files '("~/Documents/org")))

    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Positipon point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      (goto-char (point-min)))

  
#+END_SRC
** Modeline
Run ~nerd-icons-install-fonts~
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  (use-package nerd-icons)
#+END_SRC
** Meow
#+BEGIN_SRC emacs-lisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
  (require 'meow)
  (meow-setup)
  (meow-global-mode 1)  
#+END_SRC


** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
    ([f4] . treemacs)
    ([f5] . treemacs-select-window))
  :config
  (setq treemacs-is-never-other-window t))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    :hook
    (sh-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration)
    )

  (use-package lsp-ui
    :init
    (setq lsp-ui-doc-position 'at-point)
    (setq lsp-ui-doc-show-with-cursor t)    
    )
  (add-hook 'haskell-mode-hook #'lsp-deferred)
  (add-hook 'rust-mode-hook #'lsp-deferred)
  (add-hook 'nix-mode-hook #'lsp-deferred)

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+END_SRC



* Languages
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode :ensure t)
  (require 'haskell-interactive-mode)
  (require 'haskell-process)

  (define-key haskell-mode-map (kbd "<f8>") 'haskell-navigate-imports)
  (define-key haskell-mode-map (kbd "<f9>") 'haskell-mode-format-imports)
  (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)  
  (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-mode-show-type-at)

  (custom-set-variables
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-tags-on-save t)
   '(haskell-process-log t)
   '(haskell-process-suggest-hoogle-imports t))
   '(haskell-process-args-stack-ghci '("--ghci-options=-ferror-spans"))
   '(haskell-process-log t)
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-type 'stack-ghci)

  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)

#+END_SRC


** Git gutter
#+BEGIN_SRC emacs-lisp
  (require 'git-gutter)

  (global-git-gutter-mode t)

  (global-set-key (kbd "C-x C-g") 'git-gutter)
  (global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)

  ;; ;; Jump to next/previous hunk
  ;; (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
  ;; (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)

  ;; Stage current hunk
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)

  ;; Revert current hunk
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)

  ;; Mark current hunk
  (global-set-key (kbd "C-x v SPC") #'git-gutter:mark-hunk)
#+END_SRC

** Nix Mode
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
  :mode "\\.nix\\'")
#+END_SRC

** Direnv Mode
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :ensure t
  :config
  (direnv-mode))
#+END_SRC
** Vertico
#+BEGIN_SRC emacs-lisp
    ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
  (require 'vertico-posframe)
  (vertico-posframe-mode 1)
  (setq vertico-multiform-commands
      '((consult-line
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
         (vertico-posframe-border-width . 10)
         ;; NOTE: This is useful when emacs is used in both in X and
         ;; terminal, for posframe do not work well in terminal, so
         ;; vertico-buffer-mode will be used as fallback at the
         ;; moment.
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe)))
  #+END_SRC


** treesit-auto
#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+END_SRC

** consult
#+BEGIN_SRC emacs-lisp

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )  
#+END_SRC
** marginalia
#+BEGIN_SRC emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+END_SRC

** vertico
#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Support opening new minibuffers from inside existing minibuffers.
  (setq enable-recursive-minibuffers t)

  ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
  ;; mode.  Vertico commands are hidden in normal buffers. This setting is
  ;; useful beyond Vertico.
  (setq read-extended-command-predicate #'command-completion-default-include-p))
#+END_SRC

** vertico
#+BEGIN_SRC emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** vertico-posframe
#+BEGIN_SRC emacs-lisp
(require 'vertico-posframe)
(vertico-posframe-mode 1)
(setq vertico-multiform-commands
      '((consult-line
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
         (vertico-posframe-border-width . 10)
         ;; NOTE: This is useful when emacs is used in both in X and
         ;; terminal, for posframe do not work well in terminal, so
         ;; vertico-buffer-mode will be used as fallback at the
         ;; moment.
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe)))
(vertico-multiform-mode 1)
#+END_SRC
